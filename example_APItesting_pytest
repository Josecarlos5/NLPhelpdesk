import requests
import pytest
from unittest.mock import patch

# Function under test
def fetch_user_data(user_id):
    url = f"https://api.example.com/users/{user_id}"
    response = requests.get(url)
    response.raise_for_status()
    return response.json()

# Sample fixture for common setup
@pytest.fixture
def api_url():
    return "https://api.example.com"

# Example test function using pytest
@patch('requests.get')
def test_fetch_user_data_success(mock_get, api_url):
    # Setup mock response
    mock_get.return_value.status_code = 200
    mock_get.return_value.json.return_value = {"id": 1, "name": "Alice"}

    user_id = 1
    result = fetch_user_data(user_id)

    # Assertions
    assert result["id"] == 1
    assert result["name"] == "Alice"

@patch('requests.get')
@pytest.mark.parametrize("user_id, expected_status", [(999, 404), (1, 200)])
def test_fetch_user_data_status(mock_get, user_id, expected_status):
    # Setup mock response
    mock_get.return_value.status_code = expected_status
    if expected_status == 404:
        mock_get.return_value.raise_for_status.side_effect = requests.HTTPError("Not Found")
    else:
        mock_get.return_value.json.return_value = {"id": user_id, "name": "Alice"}

    if expected_status == 404:
        with pytest.raises(requests.HTTPError):
            fetch_user_data(user_id)
    else:
        result = fetch_user_data(user_id)
        assert result["id"] == user_id
