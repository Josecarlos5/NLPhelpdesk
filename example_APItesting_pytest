import requests
import pytest
from unittest.mock import patch

# Function to create a user (POST)
def create_user(user_data):
    url = "https://api.example.com/users"
    response = requests.post(url, json=user_data)
    response.raise_for_status()
    return response.json()

# Function to fetch user data (GET)
def fetch_user_data(user_id):
    url = f"https://api.example.com/users/{user_id}"
    response = requests.get(url)
    response.raise_for_status()
    return response.json()

# Example fixture for user data
@pytest.fixture
def user_data():
    return {"name": "Alice", "email": "alice@example.com"}

# Test function for successful POST request
@patch('requests.post')
def test_create_user_success(mock_post, user_data):
    mock_post.return_value.status_code = 201  # 201 Created
    mock_post.return_value.json.return_value = {"id": 1, **user_data}

    result = create_user(user_data)

    assert result["id"] == 1
    assert result["name"] == "Alice"
    assert result["email"] == "alice@example.com"

# Test function for GET request
@patch('requests.get')
def test_fetch_user_data_success(mock_get):
    mock_get.return_value.status_code = 200
    mock_get.return_value.json.return_value = {"id": 1, "name": "Alice", "email": "alice@example.com"}

    user_id = 1
    result = fetch_user_data(user_id)

    assert result["id"] == 1
    assert result["name"] == "Alice"
    assert result["email"] == "alice@example.com"

# Parameterized test for varied POST scenarios
@patch('requests.post')
@pytest.mark.parametrize("user_data, expected_status", [
    ({"name": "Bob", "email": "bob@example.com"}, 201),
    ({"name": "", "email": "invalid"}, 400),  # Bad request example
])
def test_create_user_varied(mock_post, user_data, expected_status):
    if expected_status == 201:
        mock_post.return_value.status_code = 201
        mock_post.return_value.json.return_value = {"id": 2, **user_data}
    else:
        mock_post.return_value.status_code = expected_status
        mock_post.return_value.raise_for_status.side_effect = requests.HTTPError("Bad Request")

    if expected_status == 201:
        result = create_user(user_data)
        assert result["id"] == 2
    else:
        with pytest.raises(requests.HTTPError):
            create_user(user_data)

# Test function for GET not found scenario
@patch('requests.get')
def test_fetch_user_data_not_found(mock_get):
    mock_get.return_value.status_code = 404
    mock_get.return_value.raise_for_status.side_effect = requests.HTTPError("Not Found")

    user_id = 999
    with pytest.raises(requests.HTTPError):
        fetch_user_data(user_id)
